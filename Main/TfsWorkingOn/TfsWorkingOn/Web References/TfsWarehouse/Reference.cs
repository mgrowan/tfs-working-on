//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
// 
#pragma warning disable 1591

namespace Rowan.TfsWorkingOn.TfsWarehouse {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ControllerServiceSoap", Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03")]
    public partial class ControllerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetWarehouseStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback BlockOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnblockOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReinitializeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextIntervalOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ControllerService() {
            this.Url = global::Rowan.TfsWorkingOn.Properties.Settings.Default.Rowan_TfsWorkingOn_TfsWarehouse_ControllerService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetWarehouseStatusCompletedEventHandler GetWarehouseStatusCompleted;
        
        /// <remarks/>
        public event BlockCompletedEventHandler BlockCompleted;
        
        /// <remarks/>
        public event UnblockCompletedEventHandler UnblockCompleted;
        
        /// <remarks/>
        public event ReinitializeCompletedEventHandler ReinitializeCompleted;
        
        /// <remarks/>
        public event ChangeSettingCompletedEventHandler ChangeSettingCompleted;
        
        /// <remarks/>
        public event RunCompletedEventHandler RunCompleted;
        
        /// <remarks/>
        public event NotifyCompletedEventHandler NotifyCompleted;
        
        /// <remarks/>
        public event GetNextIntervalCompletedEventHandler GetNextIntervalCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03/GetWar" +
            "ehouseStatus", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WarehouseStatus GetWarehouseStatus() {
            object[] results = this.Invoke("GetWarehouseStatus", new object[0]);
            return ((WarehouseStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetWarehouseStatusAsync() {
            this.GetWarehouseStatusAsync(null);
        }
        
        /// <remarks/>
        public void GetWarehouseStatusAsync(object userState) {
            if ((this.GetWarehouseStatusOperationCompleted == null)) {
                this.GetWarehouseStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWarehouseStatusOperationCompleted);
            }
            this.InvokeAsync("GetWarehouseStatus", new object[0], this.GetWarehouseStatusOperationCompleted, userState);
        }
        
        private void OnGetWarehouseStatusOperationCompleted(object arg) {
            if ((this.GetWarehouseStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWarehouseStatusCompleted(this, new GetWarehouseStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03/Block", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Block() {
            object[] results = this.Invoke("Block", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void BlockAsync() {
            this.BlockAsync(null);
        }
        
        /// <remarks/>
        public void BlockAsync(object userState) {
            if ((this.BlockOperationCompleted == null)) {
                this.BlockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBlockOperationCompleted);
            }
            this.InvokeAsync("Block", new object[0], this.BlockOperationCompleted, userState);
        }
        
        private void OnBlockOperationCompleted(object arg) {
            if ((this.BlockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BlockCompleted(this, new BlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03/Unbloc" +
            "k", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Unblock() {
            object[] results = this.Invoke("Unblock", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnblockAsync() {
            this.UnblockAsync(null);
        }
        
        /// <remarks/>
        public void UnblockAsync(object userState) {
            if ((this.UnblockOperationCompleted == null)) {
                this.UnblockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnblockOperationCompleted);
            }
            this.InvokeAsync("Unblock", new object[0], this.UnblockOperationCompleted, userState);
        }
        
        private void OnUnblockOperationCompleted(object arg) {
            if ((this.UnblockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnblockCompleted(this, new UnblockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03/Reinit" +
            "ialize", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Reinitialize() {
            this.Invoke("Reinitialize", new object[0]);
        }
        
        /// <remarks/>
        public void ReinitializeAsync() {
            this.ReinitializeAsync(null);
        }
        
        /// <remarks/>
        public void ReinitializeAsync(object userState) {
            if ((this.ReinitializeOperationCompleted == null)) {
                this.ReinitializeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReinitializeOperationCompleted);
            }
            this.InvokeAsync("Reinitialize", new object[0], this.ReinitializeOperationCompleted, userState);
        }
        
        private void OnReinitializeOperationCompleted(object arg) {
            if ((this.ReinitializeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReinitializeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03/Change" +
            "Setting", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangeSetting(string settingID, string newValue) {
            object[] results = this.Invoke("ChangeSetting", new object[] {
                        settingID,
                        newValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeSettingAsync(string settingID, string newValue) {
            this.ChangeSettingAsync(settingID, newValue, null);
        }
        
        /// <remarks/>
        public void ChangeSettingAsync(string settingID, string newValue, object userState) {
            if ((this.ChangeSettingOperationCompleted == null)) {
                this.ChangeSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeSettingOperationCompleted);
            }
            this.InvokeAsync("ChangeSetting", new object[] {
                        settingID,
                        newValue}, this.ChangeSettingOperationCompleted, userState);
        }
        
        private void OnChangeSettingOperationCompleted(object arg) {
            if ((this.ChangeSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeSettingCompleted(this, new ChangeSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03/Run", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Run() {
            object[] results = this.Invoke("Run", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RunAsync() {
            this.RunAsync(null);
        }
        
        /// <remarks/>
        public void RunAsync(object userState) {
            if ((this.RunOperationCompleted == null)) {
                this.RunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunOperationCompleted);
            }
            this.InvokeAsync("Run", new object[0], this.RunOperationCompleted, userState);
        }
        
        private void OnRunOperationCompleted(object arg) {
            if ((this.RunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunCompleted(this, new RunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Notification/03/Noti" +
            "fy", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Notification/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Notify(string eventXml, string tfsIdentityXml) {
            this.Invoke("Notify", new object[] {
                        eventXml,
                        tfsIdentityXml});
        }
        
        /// <remarks/>
        public void NotifyAsync(string eventXml, string tfsIdentityXml) {
            this.NotifyAsync(eventXml, tfsIdentityXml, null);
        }
        
        /// <remarks/>
        public void NotifyAsync(string eventXml, string tfsIdentityXml, object userState) {
            if ((this.NotifyOperationCompleted == null)) {
                this.NotifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyOperationCompleted);
            }
            this.InvokeAsync("Notify", new object[] {
                        eventXml,
                        tfsIdentityXml}, this.NotifyOperationCompleted, userState);
        }
        
        private void OnNotifyOperationCompleted(object arg) {
            if ((this.NotifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03/GetNex" +
            "tInterval", RequestNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", ResponseNamespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNextInterval(int lastInterval) {
            object[] results = this.Invoke("GetNextInterval", new object[] {
                        lastInterval});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextIntervalAsync(int lastInterval) {
            this.GetNextIntervalAsync(lastInterval, null);
        }
        
        /// <remarks/>
        public void GetNextIntervalAsync(int lastInterval, object userState) {
            if ((this.GetNextIntervalOperationCompleted == null)) {
                this.GetNextIntervalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextIntervalOperationCompleted);
            }
            this.InvokeAsync("GetNextInterval", new object[] {
                        lastInterval}, this.GetNextIntervalOperationCompleted, userState);
        }
        
        private void OnGetNextIntervalOperationCompleted(object arg) {
            if ((this.GetNextIntervalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextIntervalCompleted(this, new GetNextIntervalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Controller/03")]
    public enum WarehouseStatus {
        
        /// <remarks/>
        Idle,
        
        /// <remarks/>
        ProcessingOlap,
        
        /// <remarks/>
        RunningAdapters,
        
        /// <remarks/>
        Blocked,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetWarehouseStatusCompletedEventHandler(object sender, GetWarehouseStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWarehouseStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWarehouseStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WarehouseStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WarehouseStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void BlockCompletedEventHandler(object sender, BlockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UnblockCompletedEventHandler(object sender, UnblockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnblockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnblockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ReinitializeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ChangeSettingCompletedEventHandler(object sender, ChangeSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void RunCompletedEventHandler(object sender, RunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void NotifyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetNextIntervalCompletedEventHandler(object sender, GetNextIntervalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextIntervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextIntervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591